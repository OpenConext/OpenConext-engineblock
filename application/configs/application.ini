;;;
; Ini configuration for EngineBlock for all known environments.
;
; Divided in sections per environment like so:
; [acceptance : base]
;
; Meaning 'these are the settings for the acceptance environment,
; based on the base env (inherits from base)'
;
; Editting Rules:
; 1. The first rule of INI files is, you do not talk about INI files.
; 2. The second rule of INI files is is, you DO NOT talk about INI files.
; 3. Names in camelCase (note first character is lowerCase)
; 4. Every configuration item should be present and documented for [base]
; 5. All environments extend from base
; 7. Section inheritance only works one level deep
; 8. If this is your first time editing an INI file, have fun!
;;;

[base]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; PHP SETTINGS ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

phpSettings.memory_limit    = "128M"
phpSettings.display_errors  = false
phpSettings.error_reporting = 6135 ; E_ALL - E_NOTICES

; Timezone to use, for a list of supported timezones, please go to:
; http://www.php.net/manual/en/timezones.php
phpSettings.date.timezone = "Europe/Amsterdam"

; The 'From' header when sending with the PHP 'mail' function.
; http://php.net/manual/en/function.mail.php
phpSettings.sendmail_from = "SURFconext EngineBlock <surfconext-engineblock@example.edu>"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; SAML2 SETTINGS ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The Encryption keys used for the SAML2 authentication
; When EngineBlock signs responses (when it acts as an Idp)
; or requests (when it acts as an SP) it uses these X.509 certs.
encryption.key.public = ""
encryption.key.private = ""

; Setting the debug mode to true will cause EngineBlock to display more information
; about errors that have occurred and it will show the messages it sends and receives
; for the authentication.
; NEVER TURN THIS ON FOR PRODUCTION
debug = false

; The name of the table that should be used to store user consent
; to release attributes from an Idp to a specific SP
authentication.consent.database.table = "consent"
; Store attributes with their values, meaning that if an Idp suddenly
; sends a new value (like a new e-mail address) consent has to be
; given again.
authentication.consent.storeValues = true

; Where the attribute manipulations are located:
attributeManipulator.file.location = "../attribute-manipulations"
; Whether to check the attribute manipulations for syntax errors.
; You can set this to false on production to save time.
attributeManipulator.file.lint = true

; Where EngineBlock can look for attribute definitions.
; These determine:
; * How attributes are displayed in Profile and Consent
; * How attributes are Normalized and Denormalized
; * How attributes are validated
attributeDefinitionFile = ENGINEBLOCK_FOLDER_APPLICATION "configs/attributes-SURFconext.json"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; PROFILE AUTH SETTINGS ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The configuration entries below are for protecting the profile interface using SimpleSamlphp
; EntityID for the IdentityProvider
auth.simplesamlphp.idp.entityId   = ""

; SingleSignOnLocation to use
auth.simplesamlphp.idp.location   = ""

; SAML2 binding to use
auth.simplesamlphp.idp.binding    = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"

; PEM encoded public key / certificate for Identity Provider
auth.simplesamlphp.idp.cert       = ""

; Password for admin functionality
; Note "123" means no access
auth.simplesamlphp.adminPassword  = "123"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; LOGGING / ERROR HANDLING ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Logging configuration, see also Zend_Log documentation.
; http://framework.zend.com/manual/en/zend.log.html
; Note that we have the following priorities:
; 0 Emergency: system is unusable
; 1 Alert: action must be taken immediately
; 2 Critical: critical conditions
; 3 Error: error conditions
; 4 Warning: warning conditions
; 5 Notice: normal but significant condition
; 6 Informational: informational messages
; 7 Debug: debug messages

; The queue log writer collects all log messages in session
; and flushes them when an error or exception is handled or
; then the 'coin:additional_logging' option is set for an
; idp or sp
logs.syslog-queue.writerName = "Queue" ; Queue writes everything to below writers on error
logs.syslog-queue.writerNamespace = "EngineBlock_Log_Writer"

; The option 'targetLog' can be set to any log writer(s)
; desired. Currently EngineBlock_Log_Writer_Syslog is used;
; it escapes newlines and splits all messages larger than 1K.
logs.syslog-queue.writerParams.targetLog.syslog.writerName = "Syslog"
logs.syslog-queue.writerParams.targetLog.syslog.writerNamespace = "EngineBlock_Log_Writer"
logs.syslog-queue.writerParams.targetLog.syslog.writerParams.application = "SURFconext EngineBlock"

; See: http://nl.php.net/manual/en/function.openlog.php
; Defaults to LOG_USER.
; Note this is a constant so MUST not be wrapped in quotes.
;logs.syslog-queue.writerParams.targetLog.syslog.writerParams.facility = LOG_USER

; Examples:
;logs.file.writerName = "Stream"
;logs.file.filterName = "Priority"
;logs.file.writerParams.stream = "/var/log/openconext/engineblock.log"
;logs.file.filterParams.priority = 7 ; Everything

;logs.mail.writerName = "Mail"
;logs.mail.writerNamespace = "EngineBlock_Log_Writer"
;logs.mail.filterName = "Priority"
;logs.mail.filterParams.priority = 4 ; Warnings
;logs.mail.writerParams.from.email = "manage@example.edu"
;logs.mail.writerParams.from.name  = "SURFconext EngineBlock"
;logs.mail.writerParams.to.0.name  = "Sysadmin"
;logs.mail.writerParams.to.0.email = "sysadmin@example.edu"
;logs.mail.writerParams.cc.0.name  = "Developer"
;logs.mail.writerParams.cc.0.email = "developer@example.edu"
; Valid transports: Smtp, Pop3, Imap
;logs.mail.writerParams.transportName = "Smtp"
;logs.mail.writerParams.transportParams.host = "localhost"
;logs.mail.writerParams.transportParams.port = 25
;logs.mail.writerParams.transportParams.ssl = "SSL" ; Also supported: "TLS"
; SMTP authentication, supported: Login, Crammd5, Plain
;logs.mail.writerParams.transportParams.auth = "Login"
;logs.mail.writerParams.transportParams.username = ""
;logs.mail.writerParams.transportParams.password = ""
; Filter the following values from the (unsecured) mail
; Note that this is done with a simple search and replace,
; so better make sure the values are unique enough!
;logs.mail.writerParams.filterValues[] = "encryption.key.private"
;logs.mail.writerParams.filterValues[] = "ldap.password"
;logs.mail.writerParams.filterValues[] = "database.master1.password"
;logs.mail.writerParams.filterValues[] = "database.slave1.password"
;logs.mail.writerParams.filterValues[] = "serviceRegistry.user_secret"

; When an exception occurs during dispatching (probably in a controller)
; and the Dispatcher has been told to use error handling (on by default)
; it will render the following when an error has occurred.
error.module            = "Default"
error.controller        = "Error"
error.action            = "Display"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; LDAP SETTINGS ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; LDAP configuration details for provisioning
; See Zend_LDAP documentation.
; http://framework.zend.com/manual/en/zend.ldap.html
ldap.host               = ""
ldap.useSsl             = true
ldap.userName           = "cn=engineblock,dc=coin,dc=surfnet,dc=nl"
ldap.password           = ""
ldap.bindRequiresDn     = true
ldap.accountDomainName  = "dev.coin.surf.net"
ldap.baseDn             = "dc=coin,dc=surfnet,dc=nl"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; DATABASE SETTINGS ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Database masters are servers that can used for reading & writing
; Database slaves are servers that can used only for reading
; Define your servers on database.servername
; then add them to the proper pool, like database.masters[] = "servername"
; For DSN syntax, see PDO documentation
; http://www.php.net/manual/en/pdo.construct.php
database.master1.dsn = ""
database.master1.user = "engineblock"
database.master1.password = ""
;database.master1.use_persistent = true
;database.masters[] = "master1"

database.slave1.dsn = ""
database.slave1.user = "engineblock"
database.slave1.password = ""
;database.slave1.use_persistent = true
;database.slaves[] = "slave1"

; Database settings for the shindig database
databaseShindig.master1.dsn = ""
databaseShindig.master1.user = "engineblock"
databaseShindig.master1.password = ""
;databaseShindig.masters[] = "master1"

databaseShindig.slave1.dsn = ""
databaseShindig.slave1.user = "engineblock"
databaseShindig.slave1.password = ""
;databaseShindig.slaves[] = "slave1"


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; MEMCACHE SETTINGS ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;memcache.locahost.host            = "localhost"
;memcache.localhost.port           = 11211
;memcache.localhost.persistent     = true
;memcache.localhost.weight         = 1
;memcache.localhost.timeout        = 1
;memcache.localhost.retry_interval = 15
memcache.servers[] = "localhost"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; SERVICEREGISTRY SETTINGS ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; URL to the Janus REST interface
serviceRegistry.location    = ""
serviceRegistry.user        = ""
serviceRegistry.user_secret = ""
; Caching options for the Service Registry
serviceRegistry.caching.backend.name = "File"
serviceRegistry.caching.backend.options.file_name_prefix = "eb_sr_cache"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; PROVISIONING SETTINGS ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Extra (external) provisioning
;provisioners.0.className = "EngineBlock_Provisioner_ProvisioningManager"
;provisioners.0.url       = ""

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; MISCELLANEOUS SETTINGS ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defaults.title      = "SURFconext"
defaults.header     = "SURFconext"
defaults.subheader  = ""
defaults.layout     = "1-column-blue-grey"

; Static URI settings
static.protocol     = "https"
static.host         = "static.surfconext.nl"

; Profile URI settings
profile.protocol    = "https"
profile.host        = "profile.surfconext.nl"

; Language Cookie settings
cookie.lang.domain = "surfconext.nl"
; Cookie expiry time, specify the time in seconds, set empty to let the cookie get expired after the session
cookie.lang.expiry = 5184000 ; 60 days in seconds

; EngineBlock default Group Provider ID
; This identifier is used when fetching the group provider configuration for deprovisioning
; In our case this identifier should point to the Grouper group provider
defaultGroupProvider = "grouper"

; Do we send welcome emails
email.sendWelcomeMail = true

; The default email where IdP request access are send
email.help = "help@surfconext.nl"

; Where to send IdP debugging mail
;email.idpDebugging.to.address = "surfconext-beheer@surfnet.nl"
email.idpDebugging.from.name  = "SURFconext EngineBlock"
email.idpDebugging.from.address = "noreply@surfnet.nl"
email.idpDebugging.to.address = "surfconext-beheer@surfnet.nl"
email.idpDebugging.to.name    = "SURFconext Beheer"
email.idpDebugging.subject    = "IdP debug info van %1$s"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;; CRONJOB SETTINGS ;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The time after which a user is deprovisioned
cron.deprovision.idleTime = "6 months"

; Warning time settings
cron.deprovision.firstWarningTime = "4 weeks" ; Period before the idleTime
cron.deprovision.secondWarningTime = "2 weeks" ; Period before the idleTime

cron.deprovision.sendGroupMemberWarning = true ; do we send mails to teammembers who are about to loose their only admin
cron.deprovision.sendDeprovisionWarning = true ; do we send mails as warnings

[testing : base]