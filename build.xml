<project name="OpenConext EngineBlock" default="build">

    <target name="build" depends="security,test-suites,code-quality,functional-tests" />
    <target name="pre-commit" depends="test-suites,code-quality" />
    <target name="pre-push" depends="test-suites,code-quality,behat-dev,security" />
    <target name="functional-tests" depends="behat-travis" />
    <target name="functional-tests-wip" depends="behat-travis-wip" />
    <target name="code-quality-ci" depends="test-suites,code-quality"/>
    <target name="security" depends="php-security-checker"/>
    <target name="code-quality" depends="php-lint,phpmd,phpcs"/>
    <target name="test-suites" depends="eb4-tests,unit-tests,integration-tests"/>

    <target name="install-git-hooks"
            description="installs the pre-commit and pre-push hooks for git">
        <copy file="${basedir}/ci/dev/pre-commit.dist" tofile="${basedir}/.git/hooks/pre-commit"/>
        <copy file="${basedir}/ci/dev/pre-push.dist" tofile="${basedir}/.git/hooks/pre-push"/>
        <chmod file="${basedir}/.git/hooks/pre-commit" perm="a+x,g-w"/>
        <chmod file="${basedir}/.git/hooks/pre-push" perm="a+x,g-w"/>
    </target>

    <target name="get-changeset.php.raw"
            description="creates a list of changed php files separated by newline">
        <pathconvert property="changeset.php.raw" pathsep="${line.separator}">
            <fileset dir="src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </pathconvert>

        <!--Check if files are modified-->
        <condition property="changeset.php.notempty">
            <not>
                <equals arg1="${changeset.php.raw}" arg2="" trim="true"/>
            </not>
        </condition>
    </target>

    <target name="get-changeset.php.spacesep" depends="get-changeset.php.raw" if="changeset.php.notempty"
            description="Creates a quoted list of changed php files separated by spaces">
        <loadresource property="changeset.php.spacesep">
            <propertyresource name="changeset.php.raw"/>
            <filterchain>
                <tokenfilter delimoutput=" ">
                    <linetokenizer/>
                    <replaceregex pattern="^" replace='"'/>
                    <replaceregex pattern="$" replace='"'/>
                </tokenfilter>
            </filterchain>
        </loadresource>
    </target>

    <target name="php-lint" depends="get-changeset.php.spacesep" if="changeset.php.notempty"
            description="Perform syntax check of sourcecode files in parallel">
        <exec executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="echo '${changeset.php.spacesep}' | xargs -n 1 -P 4 php -l 1>/dev/null"/>
        </exec>
        <echo message="OK"/>
    </target>

    <target name="php-security-checker" description="Check your composer dependencies for insecure components">
        <exec executable="vendor/bin/security-checker" failonerror="true">
            <arg value="security:check"/>
            <arg value="--verbose"/>
            <arg value="composer.lock"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="vendor/bin/phpmd" failonerror="true">
            <arg path="src"/>
            <arg value="text"/>
            <arg value="ci/travis/phpmd.xml"/>
            <arg value="--exclude"/>
            <arg value="*/Tests/*"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec dir="${basedir}" executable="vendor/bin/phpcs" failonerror="true">
            <arg value="--report=full" />
            <arg value="--standard=ci/travis/phpcs.xml" />
            <arg value="--warning-severity=0" />
            <arg value="--extensions=php" />
            <arg path="src" />
        </exec>
    </target>

    <target name="eb4-tests" description="Run EB4 tests with PHPUnit">
        <delete dir="app/cache/test"/>
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/tests/phpunit.xml"/>
            <arg line="--testsuite=eb4"/>
            <arg line="--coverage-text"/>
        </exec>
    </target>

    <target name="unit-tests" description="Run unit tests with PHPUnit">
        <delete dir="app/cache/test"/>
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/tests/phpunit.xml"/>
            <arg line="--testsuite=unit"/>
            <arg line="--coverage-text"/>
        </exec>
    </target>

    <target name="integration-tests" description="Run integration tests with PHPUnit">
        <delete dir="app/cache/test"/>
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/tests/phpunit.xml"/>
            <arg line="--testsuite=integration"/>
        </exec>
    </target>


    <target name="behat-dev">
        <echo message="Preparing the dev env to run in functional testing mode" />
        <antcall target="enable-functional-testing"/>
        <antcall target="prepare-env-in-dev-machine"/>
        <echo message="${line.separator}${line.separator}Running Behat"/>
        <antcall target="run-behat">
            <param name="profile" value="default"/>
        </antcall>
        <echo message="${line.separator}${line.separator}Reverting the dev env to run in normal mode"/>
        <antcall target="disable-functional-testing"/>
        <antcall target="prepare-env-in-dev-machine"/>
    </target>

    <target name="behat-dev-wip">
        <echo message="Preparing the dev env to run in functional testing mode" />
        <antcall target="enable-functional-testing"/>
        <antcall target="prepare-env-in-dev-machine"/>
        <echo message="${line.separator}${line.separator}Running Behat"/>
        <antcall target="run-behat">
            <param name="profile" value="wip"/>
        </antcall>
        <echo message="${line.separator}${line.separator}Reverting the dev env to run in normal mode"/>
        <antcall target="disable-functional-testing"/>
        <antcall target="prepare-env-in-dev-machine"/>
    </target>

    <target name="behat-travis"
            description="Run the functional testing suite">
        <replace file="${basedir}/application/configs/application.ini" token=";functionalTesting = true" value="functionalTesting = true"/>
        <antcall target="run-behat">
            <param name="profile" value="default"/>
        </antcall>
        <replace file="${basedir}/application/configs/application.ini" token="functionalTesting = true" value=";functionalTesting = true"/>
    </target>

    <target name="behat-travis-wip"
            description="Run the functional testing suite for features marked as WIP">
        <replace file="${basedir}/application/configs/application.ini" token=";functionalTesting = true" value="functionalTesting = true"/>
        <antcall target="run-behat">
            <param name="profile" value="wip"/>
        </antcall>
        <replace file="${basedir}/application/configs/application.ini" token="functionalTesting = true" value=";functionalTesting = true"/>
    </target>

    <target name="run-behat"
            description="Execute the behat test suite">
        <exec executable="vendor/bin/behat" failonerror="true">
            <arg line="-c ./tests/behat.yml '@OpenConextEngineBlockFunctionalTestingBundle'"/>
            <arg line="--profile ${profile}"/>
        </exec>
    </target>

    <target name="enable-functional-testing"
            description="Set the functional testing flag to true">
        <replace file="${basedir}/application/configs/application.ini"
                 token=";functionalTesting = true"
                 value="functionalTesting = true"/>
    </target>

    <target name="disable-functional-testing"
            description="Set the functional testing flag to false">
        <replace file="${basedir}/application/configs/application.ini"
                 token="functionalTesting = true"
                 value=";functionalTesting = true"/>
    </target>

    <target name="prepare-env-in-dev-machine"
            description="ensures that the development environment uses the Functional Test DiContainer">
        <exec executable="${basedir}/run-on-vm.sh" failonerror="true">
            <arg line="sudo composer prepare-env"/>
        </exec>
    </target>
</project>
